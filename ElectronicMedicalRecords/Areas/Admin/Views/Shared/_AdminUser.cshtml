@model ElectronicMedicalRecords.Models.User
<style>
    .sidebar-wrapper .menu .sidebar-item.has-sub .t-43:after {
        top: 43px
    }
    audio{
        height: 25px
    }
</style>
<div class="sidebar-menu">
    <ul class="menu p-0 m-0">
        <li class="sidebar-item has-sub" style="margin-top:0">
            @{
                Html.RenderAction("Music", "Users");
            }
            <a href="#" class='sidebar-link t-43'>
                <div class="avatar-lg">
                    <img class="avatar" style="width:3rem;height:3rem" src="@Model.Image" alt="Face 1">
                </div>
                <div class="ms-3 name">
                    <p class="font-bold" style="margin-bottom:0">Xin Chào</p>
                    <p class="text-white mb-0">@Model.Name</p>
                </div>
            </a>
            <ul class="submenu ">
                <li class="submenu-item ">
                    <a class="text-white" href="@Url.Action("Edit","Users", new { id = Model.ID})">Cập nhật thông tin cá nhân</a>
                </li>
                @if (Request.IsAuthenticated)
                {
                    using (Html.BeginForm("LogOff", "Account", new { Area = "" }, FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
                    {
                        @Html.AntiForgeryToken()
                        <li class="submenu-item ">
                            <a class="text-white" href="javascript:document.getElementById('logoutForm').submit()">Đăng xuất</a>
                        </li>
                    }
                }
            </ul>
        </li>
    </ul>
</div>

<script type="text/javascript">
    var count = 0;
    var song = document.querySelector('#mp3');
    window.onload = function () {
        song.addEventListener('volumechange', function (e) {
            window.localStorage.setItem('muted', song.volume)
            if (song.volume == 0 && count == 1) {
                var volumnBK = window.localStorage.getItem('mutedBK')
                song.volume = volumnBK;
                song.muted = false;
                window.localStorage.setItem('muted', song.volume)
                update();
            }
            if (song.muted) {
                window.localStorage.setItem('muted', 0)
            }
            if (song.volume != 0) {
                var bk = song.volume;
                window.localStorage.setItem('mutedBK', bk)
            }
            count = 1;
        });

        song.onpause = function () {
            window.localStorage.setItem('statusSong', "stop")
        }

        song.onplay = function () {
            window.localStorage.setItem('statusSong', "start")
        }

        function setCookie(c_name, value) {
            window.localStorage.setItem(c_name, value)
        }

        function getCookie(c_name) {
            var getTime = window.localStorage.getItem(c_name);
            return getTime;
        }

        function getMuted(name) {
            var getMuted = window.localStorage.getItem(name);
            return getMuted;
        }

        function getStatusSong() {
            var getStatusSong1 = window.localStorage.getItem("statusSong");
            return getStatusSong1;
        }
        var played = false;
        var tillPlayed = getCookie('timePlayed');
        var mutedPlayed = getMuted('muted');
        var statusSong = getStatusSong();
        function update() {
            if (!played) {
                if (tillPlayed != 0) {
                    song.currentTime = tillPlayed;
                    if (mutedPlayed) {
                        song.volume = mutedPlayed;
                    }
                    if (statusSong == 'stop') {
                        song.pause()
                    } else {
                        song.play();
                    }
                    played = true;
                } else {
                    song.currentTime = tillPlayed;
                    if (mutedPlayed == null) {
                        song.muted = true;
                    }
                    song.muted = true;
                    if (statusSong == 'stop') {
                        song.pause()
                    } else {
                        song.play();
                    }
                    played = true;
                }
            } else {
                setCookie('timePlayed', song.currentTime);
            }
        }
        setInterval(update, 1000);
    }
</script>

